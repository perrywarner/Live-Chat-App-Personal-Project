import { DataTypes, Sequelize } from 'sequelize'
import { User } from './User'

export interface Message {
    // --- App defined properties
    data: string
    to: User['name']
    from: User['name']
    createTime: number // TODO get rid of this in favor of just using createdAt [generated by DB]
    existsOnlyInMemory?: boolean // A Message should only have this property after it was created and before being saved in the DB

    // --- DB controlled properties
    id: number
    createdAt: string
    updatedAt: string
}

export const setupMessageModel = async (dbConnection: Sequelize) => {
    const tableDefinition = dbConnection.define('Message', {
        data: {
            type: DataTypes.STRING,
            allowNull: false,
        },
        // TODO higher priority: set this up to be a foreign key to User[name].
        // How to do it: ctrl-f "foreign keys" in https://sequelize.org/docs/v6/core-concepts/model-basics/#column-options
        to: {
            type: DataTypes.STRING,
            allowNull: false,
        },
        // TODO higher priority: set this up to be a foreign key to User[name].
        // How to do it: ctrl-f "foreign keys" in https://sequelize.org/docs/v6/core-concepts/model-basics/#column-options
        from: {
            type: DataTypes.STRING,
            allowNull: false,
        },
        id: {
            type: DataTypes.UUID,
            defaultValue: DataTypes.UUIDV4,
            primaryKey: true,
        },
        createTime: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    })

    // Create the table if it doesn't already exist. (Not destructive)
    // If it does exist, it is first dropped. (Destructive) [caused by { force: true }]
    // !!!! TODO !!!! Next commit: remove {force: true}
    await tableDefinition.sync({ force: true })
    // if I wanted to drop it, it'd be like so
    // definition.drop();
    // TODO in future: since table creation or dropping can be destructive, consider https://sequelize.org/docs/v6/other-topics/migrations/ as a better alternative

    return tableDefinition
}

// Messages are sent to the API with only the data and from.
// Then, the API enriches with metadata like createTime.
export interface MessageCreateRequest {
    data: Message['data']
    to: Message['to']
    from: Message['from']
}

export interface MessageGetQueryParams {
    to?: Message['to']
    from?: Message['from']
}
